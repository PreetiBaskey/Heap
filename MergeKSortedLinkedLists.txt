#include<bits/stdc++.h>
using namespace std;

class LinkedList {
    public:
        int data;
        LinkedList* next;
        
        LinkedList(int data) {
            this->data = data;
            this->next = NULL;
        }
};

void insertAtEnd(LinkedList* &head, int data) {
    LinkedList* newList = new LinkedList(data);
    LinkedList* temp = head;
    
    if (head == NULL) {
        head = newList;
        return;
    }
    
    while(temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newList;
}

void printLinkedList(LinkedList* &head) {
    while(head != NULL) {
        cout<<head->data<<" ";
        head = head->next;
    }
}

LinkedList* mergeTwoLists(LinkedList* &L1, LinkedList* &L2) {
    if(L1 == NULL) return L2;
    if(L2 == NULL) return L1;
    
    if(L1->data < L2->data) {
        L1->next = mergeTwoLists(L1->next, L2);
        
        return L1;
    }
    else {
        L2->next = mergeTwoLists(L1, L2->next);
        
        return L2;
    }
}

LinkedList* partitionAndMerge(int start, int end, vector<LinkedList*> &lists) {
    if(start > end) {
        return NULL;
    }
    if(start == end) {
        return lists[start];
    }
    int mid = start + (end - start)/2;
    LinkedList* L1 = partitionAndMerge(start, mid, lists);
    LinkedList* L2 = partitionAndMerge(mid + 1, end, lists);
    
    return mergeTwoLists(L1, L2);
}

int main() {
    
    LinkedList* head1 = NULL;
    LinkedList* head2 = NULL;
    LinkedList* head3 = NULL;
    
    insertAtEnd(head1, 10);
    insertAtEnd(head1, 11);
    insertAtEnd(head1, 102);
    insertAtEnd(head1, 103);
    insertAtEnd(head1, 105);
    
    insertAtEnd(head2, 1);
    insertAtEnd(head2, 5);
    insertAtEnd(head2, 7);
    insertAtEnd(head3, 9);
    
    insertAtEnd(head3, 71);
    insertAtEnd(head3, 85);
    insertAtEnd(head3, 92);
    
    vector<LinkedList*> lists = {head1, head2, head3};
    int K = lists.size();
    LinkedList* mergedSortedKList = partitionAndMerge(0, K - 1, lists);
    
    printLinkedList(mergedSortedKList);
    
    
    return 0;
}
