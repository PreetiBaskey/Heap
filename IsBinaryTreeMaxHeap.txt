#include<bits/stdc++.h>
using namespace std;

class Node {
    public:
        int data;
        Node* left;
        Node* right;
        
        Node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};

Node* createBinaryTree(Node* root) {
    int data;
    cout<<"Enter data [Enter -1 to end] :- ";
    cin>>data;
    if(data == -1) {
        return NULL;
    }
    root = new Node(data);
    cout<<"Enter left side of "<<data<<endl;
    root->left = createBinaryTree(root->left);
    cout<<"Enter right side of "<<data<<endl;
    root->right = createBinaryTree(root->right);
    
    return root;
}
void levelOrderTraversal(Node* root) {
    if(root == NULL) {
        return;
    }
    queue<Node*> q;
    q.push(root);
    while(!q.empty()) {
        Node* front_node = q.front();
        cout<<front_node->data<<" ";
        q.pop();
        if(front_node->left != NULL) {
            q.push(front_node->left);
        }
        if(front_node->right != NULL) {
            q.push(front_node->right);
        }
    }
}

bool isHeap(Node* root) {
    if(root->left == NULL && root->right == NULL) {
        return true;
    }
    if(root->right == NULL) {
        return root->data > root->left->data;
    }
    else {
        return (root->data > root->left->data) && (root->data > root->right->data) && (isHeap(root->left) && isHeap(root->right));
    }
}
bool isCBT(Node* root, int i, int N) {
    if(root == NULL) {
        return true;
    }
    if(i > N) {
        return false;
    }
    else {
        return isCBT(root->left, 2 * i + 1, N) && isCBT(root->right, 2 * i + 2, N);
    }
}
int sizeOfBinaryTree(Node* root) {
    if(root == NULL) {
        return 0;
    }
    
    return 1 + sizeOfBinaryTree(root->left) + sizeOfBinaryTree(root->right);
}
bool isBinaryTreeHeap(Node* root) {
    if(root == NULL) {
        return true;
    }
    int N = sizeOfBinaryTree(root);
    int i = 0;
    if(isCBT(root, i, N) && isHeap(root)) {
        return true;
    }
    
    return false;
}

int main() {
    
    Node* root = NULL;
    Node* updatedRoot = createBinaryTree(root);
    cout<<"Level order traversal of binary tree is :- ";
    levelOrderTraversal(updatedRoot);
    bool result = isBinaryTreeHeap(updatedRoot);
    if(result) {
        cout<<endl<<"Binary tree is a heap !!";
    }
    else {
        cout<<endl<<"Binary tree is not a heap !!";
    }
    
    return 0;
}
