#include<bits/stdc++.h>
using namespace std;

void heapify(int arr[], int size, int i) {
    int largest = i;
    int leftIndex = 2 * i;
    int rightIndex = 2 * i + 1;
    
    while(leftIndex <= size && arr[leftIndex] > arr[largest]) {
        largest = leftIndex;
    }
    while(rightIndex <= size && arr[rightIndex] > arr[largest]) {
        largest = rightIndex;
    }
    if(largest != i) {
        int temp = arr[largest];
        arr[largest] = arr[i];
        arr[i] = temp;
        
        heapify(arr, size, largest);
    }
}

void heapSort(int arr[], int size) {

    while(size > 1) {
        int temp = arr[size];
        arr[size] = arr[1];
        arr[1] = temp;
        
        size--;
        
        heapify(arr, size, 1);
    }
}

int main() {
    
    int arr[] = {-1, 15, 5, 20, 1, 17, 10, 30};
    int size = 7;
    
    cout<<"Tree before hepifying :- ";
    for(int i = 1; i <= size; i++) {
        cout<<arr[i]<<" ";
    }
    
    //Performing Heapify
    for(int i = size/2; i >= 1; i--) {
        heapify(arr, size, i);
    }
    cout<<endl<<"Tree after heapifying :- ";
    for(int i = 1; i <= size; i++) {
        cout<<arr[i]<<" ";
    }
    
    cout<<endl<<"Tree after Heap Sort :- ";
    heapSort(arr, size);
    for(int i = 1; i <= size; i++) {
        cout<<arr[i]<<" ";
    }
    
    return 0;
}




//Another Solution, if the Normal unsorted array is given to sort, we can add extra for loop
// to first heapify
#include<bits/stdc++.h>
using namespace std;

class Heap {
    public:
        int arr[100];
        int size;
        
        Heap() {
            arr[0] = -1;
            size = 0;
        }
        
        void insert(int val) {
            size = size + 1;
            int index = size;
            arr[index] = val;
            
            while(index > 1) {
                int parent = index / 2;
                if(arr[parent] < arr[index]) {
                    int temp = arr[parent];
                    arr[parent] = arr[index];
                    arr[index] = temp;
                    
                    index = parent;
                }
                else {
                    return;
                }
            }
        }
        
        void print() {
            if(size == 0) {
                cout<<"Nothing to print !!";
                return;
            }
            else {
                for(int i = 1; i <= size; i++) {
                    cout<<arr[i]<<" ";
                }
                cout<<endl;
            }
        }
        
        void deleteFromHeap() {
    
    if(size == 0) {
        cout<<"Nothing to delete !!";
        return;
    }
    
    arr[1] = arr[size];
    size--;
    int index = 1;
    
    while(index < size) {
        int leftIndex = 2 * index;
        int rightIndex = 2 * index + 1;
        
        if(leftIndex < size && arr[index] < arr[leftIndex]) {
            int temp = arr[leftIndex];
            arr[leftIndex] = arr[index];
            arr[index] = temp;
            
            index = leftIndex;
        }
        if(rightIndex < size && arr[index] < arr[rightIndex]) {
            int temp = arr[index];
            arr[index] = arr[rightIndex];
            arr[rightIndex] = temp;
            
            index = rightIndex;
        }
        else {
            return;
        }
    }
    
}
};

void heapify(int arr[], int N, int index) {
    int largest = index;
    int leftIndex = 2 * index;
    int rightIndex = 2 * index + 1;
    
    if(leftIndex <= N && arr[largest] < arr[leftIndex]) {
        largest = leftIndex;
    }
    if(rightIndex <=  N && arr[largest] < arr[rightIndex]) {
        largest = rightIndex;
    }
    
    if(largest != index) {
        int temp = arr[largest];
        arr[largest] = arr[index];
        arr[index] = temp;
        
        heapify(arr, N, largest);
    }

}

void heapSort(int arr[], int N) {
    
    for(int i = N / 2; i > 0; i--) {
        heapify(arr, N, i);
    }
    
    int size = N;
    while(size > 1) {
        int temp = arr[size];
        arr[size] = arr[1];
        arr[1] = temp;
        size--;
        
        heapify(arr, size, 1);
    }
    
}

int main() {
    
    Heap h;
    h.insert(54);
    h.insert(55);
    h.insert(100);
    h.insert(8);
    h.insert(54);
    h.print();
    
    h.deleteFromHeap();
    h.print();
    
    h.deleteFromHeap();
    h.print();
    
    int arr[] = {-1, 10, 6, 9, 8, 11, 12};
    int N = 6;
    // for(int i = N / 2; i > 0; i--) {
    //     heapify(arr, N, i);
    // }
    // cout<<endl<<"Heap as array after heapifying is :- ";
    // for(int i = 1; i <= N; i++) {
    //     cout<<arr[i]<<" ";
    // }
    
    cout<<endl<<"Heap Sort result is :- ";
    heapSort(arr, N);
    for(int i = 1; i <= N; i++) {
        cout<<arr[i]<<" ";
    }

    return 0;
}
