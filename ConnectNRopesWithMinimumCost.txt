#include<bits/stdc++.h>
using namespace std;

int main() {
    
    //Test Case 1
    vector<int> arr = {1, 2, 3, 4, 5};
    //Test Case 2
    // vector<int> arr = {4, 3, 2, 6};
    //Test Case 3
    // vector<int> arr = {1, 2, 3};
    //Test Case 4
    // vector<int> arr = {5, 17, 100, 11};
    priority_queue<int, vector<int>, greater<int>> q;
    
    for(int i = 0; i < arr.size(); i++) {
        q.push(arr[i]);
    }
    int twoRopeSum = 0;
    int costSum = 0;
    while(q.size() >= 2) {
        int q1 = q.top();
        q.pop();
        int q2 = q.top();
        q.pop();
        twoRopeSum = q1 + q2;
        cout<<"Cost sum is :- "<<twoRopeSum<<endl;
        q.push(twoRopeSum);
        costSum = costSum + twoRopeSum;
    }
    
    cout<<"Minimum cost sum of ropes is :- "<<costSum<<endl;
    
    return 0;
}




// 2nd Approach 
#include<bits/stdc++.h>
using namespace std;

int findMinCost(vector<int> &arr) {
    int sum = 0;
    
    priority_queue<int, vector<int>, greater<int>> pq;
    for(int i = 0; i < arr.size(); i++) {
        pq.push(arr[i]);
    }
    while(pq.size() >= 2) {
        int P1 = pq.top(); pq.pop();
        int P2 = pq.top(); pq.pop();
        int temp = P1 + P2;
        sum += temp;
        pq.push(temp);
    }
    
    
    return sum;
}

int main() {
    
    vector<int> arr = {4, 2, 7, 6, 9};
    int result = findMinCost(arr);
    cout<<"Minimum cost is :- "<<result;
    
    return 0;
}
