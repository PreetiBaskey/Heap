#include<bits/stdc++.h>
using namespace std;

vector<int> arr;

class node {
    public:
        int data;
        node* left;
        node* right;
        
        node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};

node* createBST(node* root, int data) {
    if(root == NULL) {
        return new node(data);
    }
    if(data < root->data) {
        root->left = createBST(root->left, data);
    }
    else if(data > root->data) {
        root->right = createBST(root->right, data);
    }
    
    return root;
}

void inOrder(node* root) {
    if(root == NULL) {
        return;
    }
    inOrder(root->left);
    cout<<root->data<<" ";
    arr.push_back(root->data);
    inOrder(root->right);
}

node* enterData(node* root) {
    int data;
    cout<<"Enter data [Enter -1 to end] :- ";
    //4 2 1 3 6 5 7
    cin>>data;
    while(data != -1) {
        root = createBST(root, data);
        cout<<"Enter data [Enter -1 to end] :- ";
        cin>>data;
    }
    
    return root;
}

node* preOrderTraversal(node* root, vector<int> &arr, int &index) {
    if(root == NULL) {
        return NULL;
    }
    root->data = arr[index];
    index++;
    preOrderTraversal(root->left, arr, index);
    preOrderTraversal(root->right, arr, index);
    
    return root;
}


int main() {
    
    node* root = NULL;
    node* updatedRoot = enterData(root);
    cout<<endl<<"Inorder traversal is :- ";
    inOrder(updatedRoot);
    cout<<endl<<"Vector's data is :- ";
    for(int data: arr) {
        cout<<data<<" ";
    }
    int index = 0;
    node* minHeap = preOrderTraversal(updatedRoot, arr, index);
    cout<<endl<<"Inorder traversal of Min Heap is :- ";
    inOrder(minHeap);
    
    return 0;
}
