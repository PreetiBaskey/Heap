#include<bits/stdc++.h>
using namespace std;

vector<int> inOrderResult;

class Node {
    public:
        int data;
        Node* left = NULL;
        Node* right = NULL;
        
        Node(int data) {
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};
void inOrderTraversal(Node* root) {
    if(root == NULL) {
        return;
    }
    inOrderTraversal(root->left);
    cout<<root->data<<" ";
    inOrderResult.push_back(root->data);
    inOrderTraversal(root->right);
}
Node* createBST(Node* root, int data) {
    if(root == NULL) {
        return new Node(data);
    }
    if(data < root->data) {
        root->left = createBST(root->left, data);
    }
    else if(data > root->data) {
        root->right = createBST(root->right, data);
    }
    
    return root;
}
Node* enterData(Node* root) {
    int data;
    cout<<"Enter data [Enter -1 to end] :- ";
    cin>>data;
    while(data != -1) {
        root = createBST(root, data);
        cout<<"Enter data [Enter -1 to end] :- ";
        cin>>data;
    }
    
    return root;
}
Node* convertBSTToMinHeap(Node* root, vector<int> &inOrderResult, int &idx) {
    
    if(root == NULL) {
        return NULL;
    }
    root->data = inOrderResult[idx];
    idx++;
    convertBSTToMinHeap(root->left, inOrderResult, idx);
    convertBSTToMinHeap(root->right, inOrderResult, idx);
    
    return root;
}
void levelOrderTraversal(Node* root) {
    if(root == NULL) {
        return;
    }
    queue<Node*> q;
    q.push(root);
    while(!q.empty()) {
        Node* front_node = q.front();
        q.pop();
        cout<<front_node->data<<" ";
        if(front_node->left != NULL) {
            q.push(front_node->left);
        }
        if(front_node->right != NULL) {
            q.push(front_node->right);
        }
    }
}
int main() {
    
    Node* root = NULL;
    Node* updatedRoot = enterData(root);
    cout<<"Inorder traversal of BST is :- ";
    inOrderTraversal(updatedRoot);
    
    int idx = 0;
    Node* updatedRoot1 = convertBSTToMinHeap(updatedRoot, inOrderResult, idx);
    cout<<endl<<"Level Order traversal of converted Min Heap is :- ";
    levelOrderTraversal(updatedRoot1);
    
    return 0;
}
